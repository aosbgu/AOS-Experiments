{
    "PlpMain": {
        "Project": "turtleBotExplore",
        "Name": "navigate",
        "Type": "PLP",
        "Version": 1
    },
    "GlobalVariableModuleParameters": [
        {
            "Name": "navDirection",
            "Type": "tNavigateAction"
        }
    ],
    "Preconditions": {
        "GlobalVariablePreconditionAssignments": [
            {
                "AssignmentName": "__meetPrecondition",
                "AssignmentCode": "__meetPrecondition= state.robotWasInitialized == !navDirection.onlyObserve"
            }
        ],
        "ViolatingPreconditionPenalty": -80000000
    },
    "DynamicModel": {
        "NextStateAssignments": [
            {
                "AssignmentName": "the first action initialize the robot",
                "AssignmentCode": "state__.robotWasInitialized = true; "
            },
            {
                "AssignmentName": "first",
                "AssignmentCode": "if(state__.map_resolution == 0){return;}"
            },
            {
                "AssignmentName": "toRadian function",
                "AssignmentCode": "auto toRadian = [](float degrees) { return degrees*M_PI/180.0; };"
            },
            {
                "AssignmentName": "first",
                "AssignmentCode": "float mapRes = abs(state__.map_resolution)"
            },
            {
                "AssignmentName": "first",
                "AssignmentCode": "state__.map_resolution = mapRes;"
            },
            {
                "AssignmentName": "the new robot orientation in degrees. the range is (-180,180]   ,Step 1",
                "AssignmentCode": "state__.orientation= std::fmod((state.orientation + navDirection.direction*(90.0/1.5)),360);"
            },
            {
                "AssignmentName": "the new robot orientation in degrees. the range is (-180,180]   ,Step 2",
                "AssignmentCode": "state__.orientation= abs(state__.orientation) <= 180 ? state__.orientation : (state__.orientation > 0 ? -180 + ( std::fmod(state__.orientation, 180)) : 180 + ( std::fmod(state__.orientation, 180)));"
            },
            {
                "AssignmentName": "move X if no obstacles on the way",
                "AssignmentCode": "state__.robotRealLocX= state.robotRealLocX + cos(toRadian(state__.orientation)) * 0.86;"
            },
            {
                "AssignmentName": "move Y if no obstacles on the way",
                "AssignmentCode": "state__.robotRealLocY= state.robotRealLocY + sin(toRadian(state__.orientation)) * 0.86;"
            },
            {
                "AssignmentName": "find the occupancy grid cell by real location and map metadata",
                "AssignmentCode": "state__.robotGridLocX = int((state__.robotRealLocX - state__.map_position_x) / mapRes);"
            },
            {
                "AssignmentName": "find the occupancy grid cell by real location and map metadata",
                "AssignmentCode": "state__.robotGridLocY = int((state__.robotRealLocY - state__.map_position_y) / mapRes);"
            },
            {
                "AssignmentName": "declar jump x",
                "AssignmentCode": "float jumpX = state__.robotRealLocX-state.robotRealLocX;"
            },
            {
                "AssignmentName": "declar jump y",
                "AssignmentCode": "float jumpY = state__.robotRealLocY-state.robotRealLocY;"
            },
            {
                "AssignmentName": "calc num of jumps",
                "AssignmentCode": "float jumpsCount = abs(jumpX) > abs(jumpY) ? (int)(jumpX/mapRes)+1 : (int)(jumpY/mapRes)+1;"
            },
            {
                "AssignmentName": "calc jump x",
                "AssignmentCode": "jumpX = jumpX / jumpsCount;"
            },
            {
                "AssignmentName": "calc jump y",
                "AssignmentCode": "jumpY = jumpY / jumpsCount;"
            },
            {
                "AssignmentName": "should we iterate up or down in y",
                "AssignmentCode": "float signY = (state__.robotRealLocY-state.robotRealLocY) == 0 ? 1 : (state__.robotRealLocY-state.robotRealLocY)/abs(state__.robotRealLocY-state.robotRealLocY);"
            },
            {
                "AssignmentName": "should we iterate up or down in x",
                "AssignmentCode": "float signX = (state__.robotRealLocX-state.robotRealLocX) == 0 ? 1 : (state__.robotRealLocX-state.robotRealLocX)/abs(state__.robotRealLocX-state.robotRealLocX);"
            },
            {
                "AssignmentName": "init temp variables",
                "AssignmentCode": "float curX = state.robotRealLocX; float curY= state.robotRealLocY;"
            },
            {
                "AssignmentName": "go until hitting an obstacle",
                "AssignmentCode": "for(; ((signX > 0 && curX <= state__.robotRealLocX) || (signX < 0 && curX >= state__.robotRealLocX)) && ((signY > 0 && curY <= state__.robotRealLocY) || (signY < 0 && curY >= state__.robotRealLocY)); curX+= jumpX, curY+= jumpY) {int occupancyIndX = (int)((curX - state__.map_position_x) / mapRes);int occupancyIndY = (int)((curY - state__.map_position_y) / mapRes);int cellValue = state.occupancyGrid.size() == 0 ? 0 : state.occupancyGrid[occupancyIndX + state__.map_width*occupancyIndY]; if(cellValue > 50){state__.robotRealLocX = curX- signX *mapRes;state__.robotRealLocY = curY- signY *mapRes; state__.robotGridLocX = int((state__.robotRealLocX - state__.map_position_x) / state__.map_resolution); state__.robotGridLocY = int((state__.robotRealLocY - state__.map_position_x) / state__.map_resolution);break;}}"
            },
            {
                "AssignmentName": "points to mark unknown cells around them",
                "AssignmentCode": "float coordinatesX [] = {state__.robotRealLocX, (state__.robotRealLocX - (state__.robotRealLocX - state.robotRealLocX)/2)};"
            },
            {
                "AssignmentName": "points to mark unknown cells around them",
                "AssignmentCode": "float coordinatesY [] = {state__.robotRealLocY, (state__.robotRealLocY - (state__.robotRealLocY - state.robotRealLocY)/2)};"
            },
            {
                "AssignmentName": "count unknouwn marked cells",
                "AssignmentCode": "int countUnknownCells=0;"
            },
            {
                "AssignmentName": "set laser Range",
                "AssignmentCode": "float laserRange=2.0;"
            },
            {
                "AssignmentName": "iterate and mark cells",
                "AssignmentCode": "for(int pointId = 0; pointId < 2; pointId++){for(int degree = 0; degree < 360; degree+=2){bool obstacleFound=false;float untilX = coordinatesX[pointId] + cos(toRadian(degree))*laserRange; float untilY = coordinatesY[pointId] + sin(toRadian(degree))*laserRange; float signX = untilX-coordinatesX[pointId] == 0 ? 1 :(untilX-coordinatesX[pointId])/abs(untilX-coordinatesX[pointId]);float signY = untilY-coordinatesY[pointId] == 0 ? 1 : (untilY-coordinatesY[pointId])/abs(untilY-coordinatesY[pointId]); jumpX = untilX-coordinatesX[pointId]; jumpY = untilY-coordinatesY[pointId]; jumpsCount = abs(jumpX) > abs(jumpY) ? (int)(jumpX/mapRes)+1 : (int)(jumpY/mapRes)+1; jumpX = jumpX / jumpsCount; jumpY = jumpY / jumpsCount; curX = coordinatesX[pointId]; curY= coordinatesY[pointId]; for(; ((signX > 0 && curX <= untilX) || (signX < 0 && curX >= untilX)) && ((signY > 0 && curY <= untilY) || (signY < 0 && curY >= untilY)); curX+= jumpX, curY+= jumpY){ int occupancyIndX = (int)((curX - state__.map_position_x) / mapRes);int occupancyIndY = (int)((curY - state__.map_position_y) / mapRes);int cellIndex = occupancyIndX + state__.map_width*occupancyIndY; int cellValue = state.occupancyGrid[cellIndex];if(cellValue > 50){obstacleFound=true;break;} if(cellValue == -1 && state__.occupancyGrid[cellIndex] == -1){countUnknownCells++;state__.occupancyGrid[cellIndex] =0;}}if(obstacleFound){break;}}}"
            },
            {
                "AssignmentName": "fo debug copy only ",
                "AssignmentCode": "if(state_.stepCount % 2 == 0){state__.occupancyGrid2.clear();state__.occupancyGrid2.insert(state__.occupancyGrid2.begin(), state.occupancyGrid.begin(), state.occupancyGrid.end());}"
            },
            {
                "AssignmentName": "fo debug copy only ",
                "AssignmentCode": "if(state_.stepCount % 2 == 1){state__.occupancyGrid1.clear();state__.occupancyGrid1.insert(state__.occupancyGrid1.begin(), state.occupancyGrid.begin(), state.occupancyGrid.end());}"
            },
            {
                "AssignmentName": "reward by marked cells",
                "AssignmentCode": "__reward = countUnknownCells;"
            }
        ]
    },
    "StateGivenObservationModel": {
        "Assignments": []
    }
}
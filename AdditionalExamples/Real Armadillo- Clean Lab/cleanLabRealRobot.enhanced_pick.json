{
    "PlpMain": {
        "Project": "cleanLabRealRobot",
        "Name": "enhanced_pick",
        "Type": "PLP",
        "Version": 1.0
    },  
    "Preconditions": {
        "GlobalVariablePreconditionAssignments": [
            {
                "AssignmentName": "__meetPrecondition",
                "AssignmentCode": "__meetPrecondition= ((std::set<tDiscreteLocation> {state.canLocation1, state.canLocation2, state.canLocation3, state.canLocation4}).count(state.robotL.discrete)) > 0;"
            }
        ], 
        "ViolatingPreconditionPenalty": -10
    },
    "DynamicModel": {
        "NextStateAssignments": [
            {
                "AssignmentName": "realCase",
                "TempVar": {
                    "VarName": "realCase",
                    "Type": "enum",
                    "EnumName": "enumRealCase",
                    "EnumValues": [
                        "actual_pick_action_success",
                        "actual_arm_outstretched_with_can",
                        "actual_arm_outstretched_without_can",
                        "actual_not_holding",
                        "actual_dropped_the_object"
                    ]
                },
                "AssignmentCode": "realCase = !__meetPrecondition ? actual_not_holding : AOS.SampleDiscrete(enumRealCase,{0.5238, 0.0952,0,0.0476,0.4285});"
            },
            {
                "AssignmentName": "holding_can",
                "AssignmentCode": "state__.holding_can = (realCase == actual_pick_action_success || realCase == actual_arm_outstretched_with_can);"
            },
            {
                "AssignmentName": "canLocation1",
                "AssignmentCode": "if(state.canLocation1 == state.robotL.discrete) {state__.canLocation1 = (realCase == actual_pick_action_success || realCase == actual_arm_outstretched_with_can) ? eRobotHand : (realCase == actual_not_holding ? state__.canLocation1 : eUnknown);}"
            },
            {
                "AssignmentName": "canLocation2",
                "AssignmentCode": "if(state.canLocation2 == state.robotL.discrete) {state__.canLocation2 = (realCase == actual_pick_action_success || realCase == actual_arm_outstretched_with_can) ? eRobotHand : (realCase == actual_not_holding ? state.canLocation2 : eUnknown);}"
            },
            {
                "AssignmentName": "canLocation3",
                "AssignmentCode": "if(state.canLocation3 == state.robotL.discrete) {state__.canLocation3 = (realCase == actual_pick_action_success || realCase == actual_arm_outstretched_with_can) ? eRobotHand : (realCase == actual_not_holding ? state.canLocation3 : eUnknown);}"
            },
            {
                "AssignmentName": "canLocation4",
                "AssignmentCode": "if(state.canLocation4 == state.robotL.discrete) {state__.canLocation4 = (realCase == actual_pick_action_success || realCase == actual_arm_outstretched_with_can) ? eRobotHand : (realCase == actual_not_holding ? state.canLocation4 : eUnknown);}"
            },
            {
                "AssignmentName": "state__.armOutstretched",
                "AssignmentCode": "//state__.armOutstretched = realCase == actual_arm_outstretched_with_can || realCase == actual_arm_outstretched_without_can;"
            },
            {
                "AssignmentName": "__moduleResponse",
                "AssignmentCode": "if (realCase == actual_not_holding || realCase == actual_dropped_the_object)  __moduleResponse= res_pick_not_holding; if(realCase == actual_pick_action_success) __moduleResponse=AOS.Bernoulli(0.818)?res_pick_holding_can:res_pick_not_holding; if(realCase == actual_arm_outstretched_with_can) __moduleResponse= AOS.Bernoulli(0.818)?res_pick_arm_outstretched_holding_can:res_pick_without_can_arm_outstretched; if(realCase == actual_arm_outstretched_without_can) __moduleResponse=res_pick_without_can_arm_outstretched;"
            },
            {
                "AssignmentName": "__reward",
                "AssignmentCode": "__reward = -2;"
            }
        ]
    }
}